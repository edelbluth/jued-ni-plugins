# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Icinga-/Nagios-Plugin "check_hp_procurve.pl"                        #
# Copyright (c) 2012  Juergen Edelbluth, www.jued.de                  #
# This program is licensed under the GNU General Public License v3.   #
# This program comes with ABSOLUTELY NO WARRANTY.                     #
# This is free software, and you are welcome to redistribute it       #
# under certain conditions; see LICENSE.txt for details.              #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# Definitions:
#   $HOSTADDRESS$    Should be the host to check and is provided by Nagios/Icinga
#   $ARG1$           Contains the community string. In most cases, it is "public".
#   $ARG2$           Interface number
#   $ARG3$           OK Regex

# The definitions are based on the assumption, that check_hp_procurve.pl is located
# in the $USER1$ directory, next to the other Nagios plugins.

# Check if a port is up.
# returns CRITICAL on SNMP error, UNKNOWN on unknown state
# returns OK on Port Up, returns WARNING at Port Down
define command{
	command_name    check_hppc_portisup
	command_line    $USER1$/check_hp_procurve.pl -H $HOSTADDRESS$ -C $ARG1$ -T portStatus -i $ARG2$ -o "/^UP$/" -w "/^DOWN$/" -u UNKNOWN -f CRITICAL -t 5
}

# Check if a port is down.
# returns CRITICAL on SNMP error, UNKNOWN on unknown state
# returns OK on Port Down, returns CRITICAL at Port Up
define command{
	command_name    check_hppc_portisdown
	command_line    $USER1$/check_hp_procurve.pl -H $HOSTADDRESS$ -C $ARG1$ -T portStatus -i $ARG2$ -c "/^UP$/" -o "/^DOWN$/" -u UNKNOWN -f CRITICAL -t 5
}

# Check if a port is in GigaBit Mode.
# returns CRITICAL on SNMP error, UNKNOWN on unknown state
# returns OK on GigaBit, returns WARNING at 100 MBit/s, returns CRITICAL on 10 MBit/s
define command{
	command_name    check_hppc_portisgigabit
	command_line    $USER1$/check_hp_procurve.pl -H $HOSTADDRESS$ -C $ARG1$ -T portSpeed -i $ARG2$ -o "/^1([0]{9,9})$/" -w "/^1([0]{8,8})$/" -c "/^1([0]{7,7})$/" -u UNKNOWN -f CRITICAL -t 5
}

# Check if System Name is set
# returns CRITICAL on SNMP error, UNKNOWN on unknown state
# returns OK when name is set, WARNING otherwise.
define command{
	command_name    check_hppc_systemnameisset
	command_line    $USER1$/check_hp_procurve.pl -H $HOSTADDRESS$ -C $ARG1$ -T sysName -o "/^$/" -no -w "/^$/" -u UNKNOWN -f CRITICAL -t 5
}

# Check if System Location is set
# returns CRITICAL on SNMP error, UNKNOWN on unknown state
# returns OK when location is set, WARNING otherwise.
define command{
	command_name    check_hppc_systemlocationisset
	command_line    $USER1$/check_hp_procurve.pl -H $HOSTADDRESS$ -C $ARG1$ -T sysLocation -o "/^$/" -no -w "/^$/" -u UNKNOWN -f CRITICAL -t 5
}

# Check if System Contact is set
# returns CRITICAL on SNMP error, UNKNOWN on unknown state
# returns OK when contact is set, WARNING otherwise.
define command{
	command_name    check_hppc_systemcontactisset
	command_line    $USER1$/check_hp_procurve.pl -H $HOSTADDRESS$ -C $ARG1$ -T sysContact -o "/^$/" -no -w "/^$/" -u UNKNOWN -f CRITICAL -t 5
}

# Check if code version is the current one.
# returns CRITICAL on SNMP error
# returns OK when version matches (see $ARG3$, and set $ARG2$ to 0) is set, WARNING otherwise.
# Example: check_hppc_version!public!0!"/P\.1\.1\.17/i"
define command{
	command_name    check_hppc_version
	command_line    $USER1$/check_hp_procurve.pl -H $HOSTADDRESS$ -C $ARG1$ -T sysDesc -o $ARG3$ -u WARNING -f CRITICAL -t 5
}
